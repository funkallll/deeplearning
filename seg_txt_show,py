import cv2
import numpy as np
import os

'''
读取txt标注文件及原图
'''
def read_txt_labels(txt_file):
  """
  从 txt 标注文件中读取标签
  :param txt_file: txt 标注文件路径
  :return: 标签列表
  """
  with open(txt_file, "r") as f:
    labels = []
    for line in f.readlines():
      label_data = line.strip().split(" ")
      class_id = int(label_data[0])
      # 解析边界框坐标
      coordinates = [float(x) for x in label_data[1:]]
      labels.append([class_id, coordinates])
  return labels

def draw_labels(image, labels):
  """
  在图像上绘制分割区域
  :param image: 图像
  :param labels: 标签列表
  """
  for label in labels:
    class_id, coordinates = label
    # 将坐标转换为整数并重新塑形为多边形
    points = [(int(x * image.shape[1]), int(y * image.shape[0])) for x, y in zip(coordinates[::2], coordinates[1::2])]
    # 使用多边形填充
    cv2.fillPoly(image, [np.array(points)], (0, 255, 0))  # 绿色表示分割区域

# def main():
#   """
#   将 YOLO 语义分割的 txt 标注文件还原到原图中
#   """
#   # 读取图像
#   image = cv2.imread(r"E:\deeplearning\data\prac\seg\data\rotate\images\00010.jpg")
#   # 读取 txt 标注文件
#   txt_file = r"E:\deeplearning\data\prac\seg\data\rotate\labels\00010.txt"
#   labels = read_txt_labels(txt_file)
#   # 绘制分割区域
#   draw_labels(image, labels)
#   # 获取窗口大小
#   window_size = (1600, 800)  # 您可以根据需要调整窗口大小
#   # 调整图像大小
#   image = cv2.resize(image, window_size)
#   # 创建一个与窗口大小相同的黑色图像
#   background = np.zeros((window_size[1], window_size[0], 3), np.uint8)
#   # 将图像放置在黑色背景的中心
#   image_x = int((window_size[0] - image.shape[1]) / 2)
#   image_y = int((window_size[1] - image.shape[0]) / 2)
#   background[image_y:image_y + image.shape[0], image_x:image_x + image.shape[1]] = image
#   cv2.namedWindow("Image", cv2.WINDOW_NORMAL)
#   cv2.imshow("Image", image)
#   cv2.waitKey(0)
# if __name__ == "__main__":
#   main()


images_dir = r"E:\deeplearning\data\prac\seg\data\rotate\images"
labels_dir = r"E:\deeplearning\data\prac\seg\data\rotate\labels_txt_3"

# 输出保存的文件夹路径
output_dir = r"E:\deeplearning\data\prac\seg\data\rotate\show_3"
if not os.path.exists(output_dir):
  os.makedirs(output_dir)

for filename in os.listdir(images_dir):
  if filename.endswith('.jpg') or filename.endswith('.png'):  # 确保是图像文件
    image_path = os.path.join(images_dir, filename)
    image = cv2.imread(image_path)

    # 获取与图像对应的标注文件
    label_file = os.path.join(labels_dir, os.path.splitext(filename)[0] + '.txt')
    if os.path.exists(label_file):
      labels = read_txt_labels(label_file)
      # 绘制分割区域
      draw_labels(image, labels)

      # 保存到输出文件夹
      output_path = os.path.join(output_dir, filename)
      cv2.imwrite(output_path, image)


      # 注意：这里没有使用cv2.imshow和cv2.waitKey，因为我们不想在屏幕上显示图像
